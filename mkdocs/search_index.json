{
    "docs": [
        {
            "location": "/", 
            "text": "What is it?\n\n\nSmash is a smarter shell.  \nPython developers\n will be particularly interested because it also happens to host a full-fledged Python runtime (via IPython) and offers sophisticated support for Python virtual environments.  Smash leverages existing system tab completion setup as well as allowing variable \n keyword completion in Python namespaces.  For extensions, Smash provides a powerful and flexible \nplugin architecture\n that is easy to use.\n\n\nIf you're not a pythonista, then you can safely ignore the python stuff and perhaps benefit from other features like \nproject management\n, an \nevent and hook system\n, a self-contained install with no root required, and JSON-based \nconfiguration files\n.\n\n\n\n\nRequirements\n\n\nYou'll need git in order for the smash bootstrap to clone the smash repo.  Also virtualenv, and the usual Python development prerequisites.  You need to be able to compile at least fairly simple C code (this is due to smash's reliance on \nfabric\n).  In debian-based linux, the following one-liner should do the trick and for OSX you can probably homebrew something similar.\n\n\n  $ sudo apt-get install git-core Python-virtualenv Python-dev build-essential\n\n\n\n\n\n\nQuickstart\n\n\nThe smash installation happens in a sandbox, does not require root, and will not interefere with any existing system versions of IPython.  The cost of this is that setup is a little bit nonstandard and \nsetup.py\n should not be used directly unless you only want to develop against the support libraries (for that see: \ndev installation\n)\n\n\n  $ export SMASH_BRANCH=master\n  $ export SMASH_URL=https://raw.githubusercontent.com/mattvonrocketstein/smash/$SMASH_BRANCH/bootstrap.sh\n  $ curl $SMASH_URL|bash\n  $ ~/bin/smash\n\n\n\n\nDon't like the idea of curling random instructions?  If the above installation method seems scary to you, here's more or less what the bootstrap.sh file is accomplishing:\n\n\n  $ git clone https://github.com/mattvonrocketstein/smash.git\n  $ mv smash ~/.smash\n  $ cd ~/.smash\n  $ virtualenv . --no-site-packages\n  $ source bin/activate\n  $ pip install -r install_requirements.txt\n  $ python install.py\n\n\n\n\n\n\nInstallation for development\n\n\nThere are two parts to Smash: smashlib and the smash shell.  Smashlib by itself might be useful as support code for other work.  The instructions in the \nquickstart section\n will install both the shell and the support library.  Installing the shell is atypical for the reasons mentioned in that section, but \nif you only want to develop against smashlib\n, installation is  standard:\n\n\n  $ git clone https://github.com/mattvonrocketstein/smashlib.git\n  $ cd smashlib\n  $ Python setup.py develop\n  $ pip install -r requirements.txt\n\n\n\n\nSmash is in beta currently and has no major release versions apart from \"master\" and \"experimental\".  If you want to install a particular version of smash, the thing is to use the quickstart instructions, but specify a branch hash:\n\n\n  $ SMASH_BRANCH=mainline curl https://raw.githubusercontent.com/mattvonrocketstein/smash/master/bootstrap.sh | bash\n\n\n\n\n\n\nPhilosophy\n\n\nBut Why?\n\nSo, \nwhy build yet another shell?\n  Put simply, shells still kind of suck.  The main problem is that classic shells are inflexible and difficult to extend.  If you do manage to extend them at all, then you probably had to do it with shell code and the result is something that's fragile, difficult to read, and difficult to maintain.\n\n\nJust for the sake of an examples, let's consider the problem of a \"do what I mean\" extension for your shell, where if you type something that looks like a url then the url is opened automatically for you.  To effect a pre-exec style hook in bash, you'll probably need \nblack magic\n with the \nDEBUG\n trap (ugh).  Zsh is much better and has a built in pre-exec hook, but of course you'll still be writing (or at least invoking) your hooks in shell code.  This works at first, but things start to get messy when issues of code-reuse come up, or if you want to \ninvoke hooks conditionally\n, etc.\n\n\nIf you still think the do-what-i-mean puzzle sounds easy to solve in your shell, how about colorizing all structured data (maybe json or server logs) sent to stdout regardless of whether that data comes from \"cat\" or \"echo\" without explicit pipes?  What about the possibility of cohosting not just python, but other arbitrary foreign REPLs alongside your shell?  At least in theory Smash could allow simultaneous and unambiguous usage of tools for sql, ruby, mongo, lisp, whatever.  Or, what if embedding your whole system shell into \nan interactive webpage was trivial?\n\n\nEventually shells and shell-extensions get so complex they \ngrow their own package managers\n.  Why bother when a modern full-fledged programmingly language is bound to have real package management options anyway?  Honestly there's a reason we don't usually write \nsocket code in shell script\n, and a reason why system administration has moved so far away from the bad old days where any configuration management that was automated at all was automated with hacky shell scripts.  \nBut\n, since you might have existing shell aliases or functions that you still depend on, smash tries to help you \naccess your legacy junk\n until you can port it.\n\n\nSmaSh's close integration with Python itself is a huge plus, but it's also just a side effect of fixing the main problems around making a shell that is truly flexible and nontrivially extensible.\n\n\nDesign goals\n\n\n\n\nSingle-step idiot proof installation\n\n\nThe installation should always be inside a virtualenvironment, and never require root\n\n\nTry to maintain compatability with pre-existing setup for zsh and bash.\n\n\nEverything is a plugin!  Core functionality is small as hell and (almost) everything is optional\n\n\nZero (initial) configuration and sane defaults. Only power users have to care about how configuration actually works\n\n\nPython developers should be able to have a stable and persistent shell.  No kill/restart to clean namespaces, etc, regardless of how many projects they work on at once.\n\n\nTry to honor and maintain compatability with any pre-existing IPython configuration.\n\n\nEventually, non-Python developers with an addiction to a particular REPL should be able co-host that REPL alongside their system shell.\n\n\nTight integration with shell and a very powerful/flexible project-management abstraction", 
            "title": "Home"
        }, 
        {
            "location": "/#what-is-it", 
            "text": "Smash is a smarter shell.   Python developers  will be particularly interested because it also happens to host a full-fledged Python runtime (via IPython) and offers sophisticated support for Python virtual environments.  Smash leverages existing system tab completion setup as well as allowing variable   keyword completion in Python namespaces.  For extensions, Smash provides a powerful and flexible  plugin architecture  that is easy to use.  If you're not a pythonista, then you can safely ignore the python stuff and perhaps benefit from other features like  project management , an  event and hook system , a self-contained install with no root required, and JSON-based  configuration files .", 
            "title": "What is it?"
        }, 
        {
            "location": "/#requirements", 
            "text": "You'll need git in order for the smash bootstrap to clone the smash repo.  Also virtualenv, and the usual Python development prerequisites.  You need to be able to compile at least fairly simple C code (this is due to smash's reliance on  fabric ).  In debian-based linux, the following one-liner should do the trick and for OSX you can probably homebrew something similar.    $ sudo apt-get install git-core Python-virtualenv Python-dev build-essential", 
            "title": "Requirements"
        }, 
        {
            "location": "/#quickstart", 
            "text": "The smash installation happens in a sandbox, does not require root, and will not interefere with any existing system versions of IPython.  The cost of this is that setup is a little bit nonstandard and  setup.py  should not be used directly unless you only want to develop against the support libraries (for that see:  dev installation )    $ export SMASH_BRANCH=master\n  $ export SMASH_URL=https://raw.githubusercontent.com/mattvonrocketstein/smash/$SMASH_BRANCH/bootstrap.sh\n  $ curl $SMASH_URL|bash\n  $ ~/bin/smash  Don't like the idea of curling random instructions?  If the above installation method seems scary to you, here's more or less what the bootstrap.sh file is accomplishing:    $ git clone https://github.com/mattvonrocketstein/smash.git\n  $ mv smash ~/.smash\n  $ cd ~/.smash\n  $ virtualenv . --no-site-packages\n  $ source bin/activate\n  $ pip install -r install_requirements.txt\n  $ python install.py", 
            "title": "Quickstart"
        }, 
        {
            "location": "/#installation-for-development", 
            "text": "There are two parts to Smash: smashlib and the smash shell.  Smashlib by itself might be useful as support code for other work.  The instructions in the  quickstart section  will install both the shell and the support library.  Installing the shell is atypical for the reasons mentioned in that section, but  if you only want to develop against smashlib , installation is  standard:    $ git clone https://github.com/mattvonrocketstein/smashlib.git\n  $ cd smashlib\n  $ Python setup.py develop\n  $ pip install -r requirements.txt  Smash is in beta currently and has no major release versions apart from \"master\" and \"experimental\".  If you want to install a particular version of smash, the thing is to use the quickstart instructions, but specify a branch hash:    $ SMASH_BRANCH=mainline curl https://raw.githubusercontent.com/mattvonrocketstein/smash/master/bootstrap.sh | bash", 
            "title": "Installation for development"
        }, 
        {
            "location": "/#philosophy", 
            "text": "But Why? \nSo,  why build yet another shell?   Put simply, shells still kind of suck.  The main problem is that classic shells are inflexible and difficult to extend.  If you do manage to extend them at all, then you probably had to do it with shell code and the result is something that's fragile, difficult to read, and difficult to maintain.  Just for the sake of an examples, let's consider the problem of a \"do what I mean\" extension for your shell, where if you type something that looks like a url then the url is opened automatically for you.  To effect a pre-exec style hook in bash, you'll probably need  black magic  with the  DEBUG  trap (ugh).  Zsh is much better and has a built in pre-exec hook, but of course you'll still be writing (or at least invoking) your hooks in shell code.  This works at first, but things start to get messy when issues of code-reuse come up, or if you want to  invoke hooks conditionally , etc.  If you still think the do-what-i-mean puzzle sounds easy to solve in your shell, how about colorizing all structured data (maybe json or server logs) sent to stdout regardless of whether that data comes from \"cat\" or \"echo\" without explicit pipes?  What about the possibility of cohosting not just python, but other arbitrary foreign REPLs alongside your shell?  At least in theory Smash could allow simultaneous and unambiguous usage of tools for sql, ruby, mongo, lisp, whatever.  Or, what if embedding your whole system shell into  an interactive webpage was trivial?  Eventually shells and shell-extensions get so complex they  grow their own package managers .  Why bother when a modern full-fledged programmingly language is bound to have real package management options anyway?  Honestly there's a reason we don't usually write  socket code in shell script , and a reason why system administration has moved so far away from the bad old days where any configuration management that was automated at all was automated with hacky shell scripts.   But , since you might have existing shell aliases or functions that you still depend on, smash tries to help you  access your legacy junk  until you can port it.  SmaSh's close integration with Python itself is a huge plus, but it's also just a side effect of fixing the main problems around making a shell that is truly flexible and nontrivially extensible.  Design goals   Single-step idiot proof installation  The installation should always be inside a virtualenvironment, and never require root  Try to maintain compatability with pre-existing setup for zsh and bash.  Everything is a plugin!  Core functionality is small as hell and (almost) everything is optional  Zero (initial) configuration and sane defaults. Only power users have to care about how configuration actually works  Python developers should be able to have a stable and persistent shell.  No kill/restart to clean namespaces, etc, regardless of how many projects they work on at once.  Try to honor and maintain compatability with any pre-existing IPython configuration.  Eventually, non-Python developers with an addiction to a particular REPL should be able co-host that REPL alongside their system shell.  Tight integration with shell and a very powerful/flexible project-management abstraction", 
            "title": "Philosophy"
        }, 
        {
            "location": "/features/", 
            "text": "System Shell + Python\n\n\nSmash functions as a normal system shell, but it also has full fledged python interpretter.  The goal is to be unsurprising and seamless, doing shell stuff in the shell places and python stuff in the python places.  If you're a bash user or an ipython user, many aspects of your existing configuration efforts can also be \ninherited automatically\n.\n\n\n\n\nIf you don't care anything about python, you can ignore the python features of Smash completely.  If you \nare\n a python programmer, then you probably spend as much time in a python interpretter as you do in shell.  Why not trade those two windows for just one and reduce your screen clutter? You can start reading \nhere\n to find out some of the other python friendly features of smash.\n\n\n\n\nPrompt Features \n\n\nBy default smash ships with the wonderfully dynamic \nliquidprompt tool\n.  Liquidprompt has rich options for configuration and it's recommended that you \nconfigure it in the normal way\n, but, some of these options can be overridden from \n~/.smash/config.py\n.  (See the \nliquidprompt plugin information\n for more details.)  The default liquidprompt configuration features a prompt that shows activated python virtual environments, as well as VCS branch and commit/stash status, etc.  Other options include everything from cpu/battery status to write-permissions for the current directory.  Take a look at how it updates below based on the context:\n\n\n\n\nThe prompt can be turned off by disabling the liquid prompt plugin, and either setting \nPS1\n' as usual or \nprompt_manager.in_template\n Support for \npowerline\n prompts isn't installed by default, but adding it should be easy.  If you can't live without that, \nmake an issue of it\n!\n\n\n\n\nTab Completion System \n\n\nDepending on the context, tab completion information is derived either from ipython (for python namespaces, ipython aliases, etc) or directly from bash (for system commands / paths, hostnames, VCS subcommands, debian packages, whatever your system supports).  Thus if you now use bash exclusively\n**\n then this means that no effort at all goes into porting old completers into smash shell.  For building new completion mechanisms, you have the option of writing them inside or outside of smash, based on your preference.\n\n\n\n\n**: if you are a zsh wizard, please help fix \nissue 11\n!\n\n\n\n\nConfiguration \n\n\nThe main documentation for configuration is \nhere\n, and this section is just a summary.  Smash configuration aims at being simple and self-contained.  Everything is configured in JSON files which are stored in \n~/.smash/etc\n.  You can have per-project aliases and environment variables and enable or disable a variety of plugins.\n\n\n\n\nPlugins / Extensions \n\n\nSmash has lots of plugins that extend or modify the core behaviour.  Some plugins are turned on by default, some are complete but opt-in, and still others are works in progress, demonstrations, or proof-of-concepts.  The smash core just includes essential stuff, so it's safe to assume that most of the functionality described in this documentation is technically describing smash plugins.  If you're interested in reading about or configuring individual plugins, see the \nlist of plugins\n.  If you want to write a new plugin, check out the documentation \nhere", 
            "title": "Feature Overview"
        }, 
        {
            "location": "/configuration/", 
            "text": "Smash configuration, like smash libraries and executables, are stored in \n~/.smash\n.  The main configuration file is \n~/.smash/etc/config.py\n.  If your \neditor is configured\n, you can open the main configuration file at any time from typing \ned_config\n inside of smash.\n\n\n\n\nInheriting existing shell configuration\n\n\nBy default smash will try to honor existing bash aliases and functions.  If you do not want your bash aliases migrated into Smash, ensure the \nload_bash_aliases\n settings is False.\n\n\n    Smash.load_bash_aliases = False\n\n\n\n\nIf you do not want to be able to run legacy bash functions from your shell, ensure the \nload_bash_functions\n setting is False.  Note that only bash functions mentioned in your profile, .bashrc, etc will be loaded.  (Loading bash functions from arbitrary files that you source is \nissue #15\n)\n\n\n    Smash.load_bash_functions = False\n\n\n\n\n\n\nInheriting existing IPython configuration\n\n\nIf you are already using IPython and want to load aspects of existing profile configuration, add something like this to \n~/.smash/config.py\n:\n\n\n    load_subconfig('ipython_config.py', profile='default')\n\n\n\n\n\n\nEditor configuration\n\n\nThere are several reasons that it can be useful to let smash know about your editor.  Here are a few:\n\n\n\n\nSmash, like IPython, helps you open and edit the code for any given object.  (try: \nimport webbrowser; ed webbrowser\n).\n\n\nZsh-style \nsuffix aliases\n are supported by the \nDWIM plugin\n\n\nvarious shortcuts help you open smash configuration: \ned_editor\n, \ned_aliases\n, etc\n\n\n\n\nThe editor configuration file (\n~/.smash/etc/editor.json\n) should have the following format, otherwise the json validator will complain:\n\n\n {\n   \nconsole\n:\nsome_editor_invocation\n,\n   \nwindow_env\n:\nsome_editor_invocation\n\n }\n\n\n\n\nIf this file does not exist, it will be created for you with default values.  Note that invocation lines may include flags, for instance \nemacsclient -n\n or  \nnano --softwrap --quiet\n is fine.\n\n\n\n\nAlias configuration\n\n\nIn smash aliases are essentially the same as ipython or bash aliases, except that these aliases are potentially project specific.  The alias configuration file (\n~/.smash/etc/aliases.json\n) will be created if it does not exist, and should have a format similar to the following example, or else the json validator will complain.\n\n\n{ \n__smash__\n:\n    [ [\nbunzip\n,\n bunzip2\n],\n      [\nl\n, \nls -la --color\n],\n      .....\n    ],\n  \nmy_first_project\n:\n    [ [\ngo\n, \nstart-daemon\n],\n      [\nstop\n, \nkill -KILL `cat daemon.pid`\n]\n    ],\n  \nother_project\n:\n    [ [\ngo\n, \nsudo /etc/init.d/mongo start\n],\n      [\nstop\n, \nsudo /etc/init.d/mongo stop\n],\n      ...\n    ],\n  ...\n}\n\n\n\n\nThe aliases mentioned in the \n__smash__\n section are global and always-on, so this is most likely where you want to put your default aliases.\n  The aliases mentioned in \"my_first_project\" and \"other_project\" would only be activated when that project was activated.  See the \nproject manager documentation\n for a more in-depth explanation of projects.", 
            "title": "Configuration"
        }, 
        {
            "location": "/plugins/", 
            "text": "Autojump\n |\n\nHandle Command Failure\n |\n\nDo What I Mean\n |\n\nChange-dir Hooks\n |\n\nPython Tools Completion\n |\n\nPython Virtual Environments\n\n\nThe smash core aims to be small and only include the essentials, so much of the behaviour of shell comes down to plugins.  In Smash, \"plugins\" are just IPython extensions which require smashlib, and possibly require the smash shell itself.  As a result many of the plugins may work in vanilla IPython.  If you don't care about the built in plugin options and only want to write new plugins, \nsee this section\n.  There are a few main things that plugins may potentially do.  Specifically, \neach plugin may\n:\n\n\n\n\nhave configuration options\n\n\npublish commands or command aliases\n\n\nadd completers or new input preprocessing\n\n\nreceive signals from the IPython event subsystem\n\n\nreceive signals from the smash-specific event subsystem\n\n\nsend signals on the smash-specific event subsystem\n\n\n\n\nThe rest of this page attempts to completely describe the plugins which ship with smash, although note that these plugins may not be enabled by default.\n\n\n\n\n\nHandle Command Failure\n\n\nThis plugin receives a signal whenever a system command fails, where the signal contains information about both the full command and the exit code.  Note that this is happens all the time since \"ls /does/not/exist\" terminates with a non-zero exit status, but this may interest plugin implementors.\n\n\nSignals\n\n\nReceives:\n COMMAND_FAIL\n\n\n\n\n\n\n\nPython Tools Completion\n\n\nThis plugin provides completion options for common python tools like \nFabric\n, \nIPython\n, \nsetup.py\n, \nflake8\n/\npyflakes\n \ntox\n, and other stuff you probably use on a daily basis.  Completion for each command is at least over command line options/flags, but in some cases there are other context clues that can be provided:\n\n\n\n\nfabric completion also works over task names.\n\n\ntox completion includes available environments according to tox.ini when using \"tox -e\"\n\n\nipython completion includes available profiles when using --profile option\n\n\n\n\nConfiguration Options:\n\n\n\n\nPythonTools.verbose\n: set True to see debug messages\n\n\n\n\n\n\nAutojump\n\n\nSmash ships with an integrated version of the wonderful \nautojump\n command line tool, which uses information from change-dir to maintain a ranked list of flexible short cuts.  In other words after you've cd'd into /foo/bar/baz/qux at least once, you can use \nj qux\n or \njump qux\n to take you there afterwards.  Tab completion over jump-destinations is automatically enabled so that \nj qu\nTAB\n does what you'd expect.\n\n\nCommands:\n\n\n\n\nj some_bookmark\n: jump to a directory based on the weighted ratings in the current database\n\n\n\n\nSignals\n\n\nReceives:\n CHANGE_DIR\n\n\n\n\nEnhanced \"which\"\n\n\nThis plugin augments the system \"which\" command with a version that knows about python libraries and virtualenvs.\n\n\n\n\nCommands:\n\n\n\n\nwhich *module_or_cmd*\n: display information about a system command or python module\n\n\n\n\n\n\nChange directory hooks\n\n\nThe CD hooks feature is mostly a service for other plugins to use. It adds a \"directory changed\" event to smash, which is useful for building stuff like automatic-activation rules (see for example the \nproject manager\n.  New plugins can build hooks and subscribe to CD events, or you can just register a callback without writing a new plugin.  Here's a minimal example of what a callback would look like:\n\n\n    def test_change_message(bus, new, old):\n        \n a demo for the CD hook \n\n        print 'moved from old directory {0} to new one at {1}'.format(old, new)\n\n\n\n\nConfiguration Options:\n\n\n\n\nChangeDirHooks.verbose\n: set True to see debug messages\n\n\nChangeDirHooks.change_dir_hooks.append('foo)\n: add python dot-paths or shell commands as cd-hooks\n\n\n\n\nSignals\n\n\nPublishes:\n CHANGE_DIR\n\n\n\n\nDo What I mean\n\n\n\nThe DoWhatIMean plugin supports zsh-style alias suffixes, automatic directory changing, opening of urls, etc.  For a feature summary, see the input -\n action list below.\n\n\n\n\n\n\n\n\nOn Input\n\n\nRun test\n\n\nIf test is true Action is\n\n\n\n\n\n\n\n\n\n\nhttp://foo/bar\n\n\n(none)\n\n\nopen with browser\n\n\n\n\n\n\nftp://foo/bar\n\n\n(none)\n\n\nopen with browser\n\n\n\n\n\n\nssh://user@host\n\n\n(none)\n\n\nrun ssh\n\n\n\n\n\n\nmosh://user@host\n\n\n(none)\n\n\nrun mosh\n\n\n\n\n\n\nfoo.bar\n\n\nis foo.bar executable?\n\n\nrun as usual\n\n\n\n\n\n\nfoo.bar\n\n\nis bar a defined suffix_alias?\n\n\nopen with specified opener\n\n\n\n\n\n\nfoo/bar\n\n\nis bar a directory?\n\n\nchange-dir to bar\n\n\n\n\n\n\nfoo/bar\n\n\nis bar editable?\n\n\nopen with editor\n\n\n\n\n\n\nfoo/bar:ROW:COL:\n\n\nis bar editable?\n\n\nopen with editor\n\n\n\n\n\n\n\n\nConfiguration Options:\n\n\n\n\nDoWhatIMean.verbose\n: set True to see debug messages\n\n\nDoWhatIMean.suffix_aliases\n: map of \n{file_extension -\n open_command}\n\n\n\n\nSignals\n\n\nReceives:\n URL_INPUT, FILE_INPUT\n\n\n\n\nVirtual Environment\n\n\nSmash has sophisticated virtualenv support which is useful particularly if you're working on multiple projects or working with multiple versions of the same requirements.  Activating/deactivating venvs is done with \nvenv_activate some_dir\n and \nvenv_deactivate\n, respectively.  This not only updates your $PATH, but updates the python runtime.  Modules from the new environment can now be imported directly, and side-effects from the old virtualenv are purged.  To activate and deactivate virtualenv's automatically, take a look at the \nproject manager documentation\n.\n\n\nCommands:\n\n\n\n\nvenv_activate some_dir\n: activate a specific virtual environment\n\n\nvenv_deactivate some_dir\n: deactivates the current virtual environment\n\n\n\n\nConfiguration Options:\n\n\n\n\nVirtualEnv.verbose\n: set True to see debug messages\n\n\n\n\nSignals\n\n\n\n\nWriting new plugins\n\n\nWriting new plugins is fairly easy, but may not be necessary for your application (see the \nconfiguration summary\n or the \nmain configuration documentation\n). If you do need to write a plugin, read on, but first a bit of background.  Smash is built on top of \nIPython\n and is in fact itself an IPython extension.  \nSmash plugins are essentially ipython extensions which require smash\n, but it can be useful to differentiate the terminology.  Before going much further it's probably a good idea to check out the existing IPython docs on \nwriting extensions\n.\n\n\nIf you want to do simple stuff like just writing new commands then a tutorials for \nwriting IPython magic\n will probably be all you need.\n\n\nIf you want to get your hooks into smash-specific events like \"directory change\" or \"virtual environment deactived\" then read \nthis documentation\n about the smash event system. For an example of writing new tab-completion stuff, check out \nthe code for the fabric completer\n.  For an example of input preprocessing see the \ncode for\n the \ncurrency converter\n.  For an example of all-else-fails input processing (meaning input was neither bash nor python) see \nthe code for\n the \ndo-what-i-mean plugin", 
            "title": "Plugins"
        }, 
        {
            "location": "/plugins/#writing-new-plugins", 
            "text": "Writing new plugins is fairly easy, but may not be necessary for your application (see the  configuration summary  or the  main configuration documentation ). If you do need to write a plugin, read on, but first a bit of background.  Smash is built on top of  IPython  and is in fact itself an IPython extension.   Smash plugins are essentially ipython extensions which require smash , but it can be useful to differentiate the terminology.  Before going much further it's probably a good idea to check out the existing IPython docs on  writing extensions .  If you want to do simple stuff like just writing new commands then a tutorials for  writing IPython magic  will probably be all you need.  If you want to get your hooks into smash-specific events like \"directory change\" or \"virtual environment deactived\" then read  this documentation  about the smash event system. For an example of writing new tab-completion stuff, check out  the code for the fabric completer .  For an example of input preprocessing see the  code for  the  currency converter .  For an example of all-else-fails input processing (meaning input was neither bash nor python) see  the code for  the  do-what-i-mean plugin", 
            "title": "Writing new plugins"
        }, 
        {
            "location": "/project_manager/", 
            "text": "What is it?\n\n\nThe project manager is a smash plugin that helps out with all kinds of project automation.\n  Basically projects are natural abstractions for lots of kinds of work, and will be familiar to anyone who has used an IDE.  In smash, the concept is quite flexible and powerful for all sorts of automation.  \nA project is defined by a nickname and associated with a directory.\n  In the simplest case a project can function as merely a bookmark that can be jumped to, or for more involved projects you might want a set of command aliases and macros which other projects do not share.  Projects also have \ntypes\n and \noperations\n, which can either be specified or autodetected based on the contents of the project directory.\n\n\nImportant concepts\n\n\nProject Types\n are simply lists of strings, such as [\"python\"], or [\"python\", \"puppet\"].  The type of a project may be provided by the user or autodetected by smash.  New user-defined types are encouraged, but they won't have default operations (see below).\n\n\nThe default operations and some examples of what they might involve for your project are described below:\n\n\nProject Operations\n are things you can do to projects, where the builtin operations are \nadd\n, \nactivate\n, \nbuild\n, \ncheck\n, \ntest\n, and \ndeactivate\n.  The meaning of an operation varies based on project-type, for instance testing a python project will be different than testing a ruby project.  User defined operations are also possible.  The specific implementation for a given operation can be specified per project as a list, where the list contains a sequence of shell commands or python callables.  If a given operation is not defined for a given project, a reasonable default for that operation should be guessed based on the project type.  For each operation, here are some examples of the type of actions you might like to perform:\n\n\n\n\nAdd\n: register new project nickname \n directory with the Project Manager\n\n\nActivate\n: pull fresh code, start project-specific database services or system daemons.\n\n\nBuild\n: maybe tox for a python project, ant for java or whatever\n\n\nCheck\n: verify symlinks, start linters or other static analysis\n\n\nTest\n: set environment variables and then run unittests\n\n\nDeactivate\n: push finished code, stop project-specific database services or other system daemons.\n\n\n\n\nIn the sections below, you will find instructions on how to invoke operations and what the default operations will involve for each project type.\n\n\nProject-manager Commands\n\n\n\n\nAdding Projects\n can be accomplished temporarily with \nadd_project nickname dir\n, or new projects can be permanently added in \n~/.smash/config.py\n.  If you have a single directory like \n~/code\n that contains multiple projects, you can turn each subdirectory into a project by setting \nproject_search_dir\n in the smash config file.\n\n\n\n\n\n\nActivating Projects\n is done with a command like \nproj.nickname\n.  (Note: you can use tab-completion over project names).\n\n\n\n\nVagrant projects:\n\n\nrun \"vagrant up\"\n\n\n\n\n\n\nPython projects:\n\n\njump to the project base directory\n\n\nif the project contains one or more virtualenvs, then\n\n\nthe most recent will be activated (.tox is ignored)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDeactivating Projects\n usually isn't necessary because activating a new project will automatically deactivate the previous project.  To manually deactivate the current project, type \nproj._deactivate\n or \ndeactivate_project\n.\n\n\n\n\nVagrant projects:\n\n\nrun \"vagrant halt\"\n\n\n\n\n\n\nPython projects:\n\n\ndeactivate virtual environments associated with project\n\n\n\n\n\n\n\n\n\n\nBuilding Projects\n is done for the current project using \n.build\n, or for an arbitrary project using \nbuild_project nickname\n.\n\n\n\n\nPython projects:\n\n\nif tox.ini is present\n\n\nruns \ntox $TOX_BUILD_ARGS\n \n(set this up in the activation rules)\n\n\n\n\n\n\nif setup.py is present run \"setup.py develop\"\n\n\n\n\n\n\nDoc projects:\n\n\nif there is a README.md markdown file, generate github style html\n\n\nif there are other markdown files, generate html\n\n\n\n\n\n\n\n\n\n\nChecking Projects\n is done on the current project using \n.check\n, or on an arbitrary project using \ncheck_project nickname\n.\n\n\n\n\nPython projects:\n\n\nflake8\n will be used if found, virtualenvs and tox will be ignored\n\n\ncollects statistics about total problems and triages files\n\n\n\n\n\n\nHaskell Projects:\n\n\nhlint\n will be used if found\n\n\noutput is parsed for statistics about total problems\n\n\n\n\n\n\n\n\n\n\nTesting Projects\n is done for the current project using \n.test\n, or on an arbitrary project \ntest_project nickname\n.  It's difficult to guess in general how project tests should be run, but smash can detect or guess a few different patterns:\n\n Python projects:\n    * try using tox first if tox.ini found\n        * runs \ntox $TOX_TEST_ARGS\n \n(set this in the activation rules)*\n    * if tox is not found, look for \ntests/\n or \n*/tests\n folder,\n        * if found, collect and attempt to run with pytest\n\n\n\n\nSearching inside a project\n is blah blah blah blah blah.\n\n Python projects:\n    * try using tox first if tox.ini found\n        * runs \ntox $TOX_TEST_ARGS\n \n(set this in the activation rules)*\n    * if tox is not found, look for \ntests/\n or \n*/tests\n folder,\n        * if found, collect and attempt to run with pytest", 
            "title": "Project Manager"
        }, 
        {
            "location": "/project_manager/#what-is-it", 
            "text": "The project manager is a smash plugin that helps out with all kinds of project automation.   Basically projects are natural abstractions for lots of kinds of work, and will be familiar to anyone who has used an IDE.  In smash, the concept is quite flexible and powerful for all sorts of automation.   A project is defined by a nickname and associated with a directory.   In the simplest case a project can function as merely a bookmark that can be jumped to, or for more involved projects you might want a set of command aliases and macros which other projects do not share.  Projects also have  types  and  operations , which can either be specified or autodetected based on the contents of the project directory.", 
            "title": "What is it?"
        }, 
        {
            "location": "/project_manager/#important-concepts", 
            "text": "Project Types  are simply lists of strings, such as [\"python\"], or [\"python\", \"puppet\"].  The type of a project may be provided by the user or autodetected by smash.  New user-defined types are encouraged, but they won't have default operations (see below).  The default operations and some examples of what they might involve for your project are described below:  Project Operations  are things you can do to projects, where the builtin operations are  add ,  activate ,  build ,  check ,  test , and  deactivate .  The meaning of an operation varies based on project-type, for instance testing a python project will be different than testing a ruby project.  User defined operations are also possible.  The specific implementation for a given operation can be specified per project as a list, where the list contains a sequence of shell commands or python callables.  If a given operation is not defined for a given project, a reasonable default for that operation should be guessed based on the project type.  For each operation, here are some examples of the type of actions you might like to perform:   Add : register new project nickname   directory with the Project Manager  Activate : pull fresh code, start project-specific database services or system daemons.  Build : maybe tox for a python project, ant for java or whatever  Check : verify symlinks, start linters or other static analysis  Test : set environment variables and then run unittests  Deactivate : push finished code, stop project-specific database services or other system daemons.   In the sections below, you will find instructions on how to invoke operations and what the default operations will involve for each project type.", 
            "title": "Important concepts"
        }, 
        {
            "location": "/project_manager/#project-manager-commands", 
            "text": "Adding Projects  can be accomplished temporarily with  add_project nickname dir , or new projects can be permanently added in  ~/.smash/config.py .  If you have a single directory like  ~/code  that contains multiple projects, you can turn each subdirectory into a project by setting  project_search_dir  in the smash config file.    Activating Projects  is done with a command like  proj.nickname .  (Note: you can use tab-completion over project names).   Vagrant projects:  run \"vagrant up\"    Python projects:  jump to the project base directory  if the project contains one or more virtualenvs, then  the most recent will be activated (.tox is ignored)         Deactivating Projects  usually isn't necessary because activating a new project will automatically deactivate the previous project.  To manually deactivate the current project, type  proj._deactivate  or  deactivate_project .   Vagrant projects:  run \"vagrant halt\"    Python projects:  deactivate virtual environments associated with project      Building Projects  is done for the current project using  .build , or for an arbitrary project using  build_project nickname .   Python projects:  if tox.ini is present  runs  tox $TOX_BUILD_ARGS   (set this up in the activation rules)    if setup.py is present run \"setup.py develop\"    Doc projects:  if there is a README.md markdown file, generate github style html  if there are other markdown files, generate html      Checking Projects  is done on the current project using  .check , or on an arbitrary project using  check_project nickname .   Python projects:  flake8  will be used if found, virtualenvs and tox will be ignored  collects statistics about total problems and triages files    Haskell Projects:  hlint  will be used if found  output is parsed for statistics about total problems      Testing Projects  is done for the current project using  .test , or on an arbitrary project  test_project nickname .  It's difficult to guess in general how project tests should be run, but smash can detect or guess a few different patterns:  Python projects:\n    * try using tox first if tox.ini found\n        * runs  tox $TOX_TEST_ARGS   (set this in the activation rules)*\n    * if tox is not found, look for  tests/  or  */tests  folder,\n        * if found, collect and attempt to run with pytest   Searching inside a project  is blah blah blah blah blah.  Python projects:\n    * try using tox first if tox.ini found\n        * runs  tox $TOX_TEST_ARGS   (set this in the activation rules)*\n    * if tox is not found, look for  tests/  or  */tests  folder,\n        * if found, collect and attempt to run with pytest", 
            "title": "Project-manager Commands"
        }, 
        {
            "location": "/api/", 
            "text": "title\nsmashlib API documentation\n/title\n\n\nmeta name=\"description\" content=\"smashlib\" /\n\n\n\n\n\n\n\n\n<ul>\n<li>{\n  box-sizing: border-box;\n}\n/<em>! normalize.css v1.1.1 | MIT License | git.io/normalize </em>/</li>\n</ul>\n<p>/<em> ==========================================================================\n   HTML5 display definitions\n   ========================================================================== </em>/</p>\n<p>/*<em>\n * Correct <code>block</code> display not defined in IE 6/7/8/9 and Firefox 3.\n </em>/</p>\n<p>article,\naside,\ndetails,\nfigcaption,\nfigure,\nfooter,\nheader,\nhgroup,\nmain,\nnav,\nsection,\nsummary {\n    display: block;\n}</p>\n<p>/*<em>\n * Correct <code>inline-block</code> display not defined in IE 6/7/8/9 and Firefox 3.\n </em>/</p>\n<p>audio,\ncanvas,\nvideo {\n    display: inline-block;\n    <em>display: inline;\n    </em>zoom: 1;\n}</p>\n<p>/*<em>\n * Prevent modern browsers from displaying <code>audio</code> without controls.\n * Remove excess height in iOS 5 devices.\n </em>/</p>\n<p>audio:not([controls]) {\n    display: none;\n    height: 0;\n}</p>\n<p>/*<em>\n * Address styling not present in IE 7/8/9, Firefox 3, and Safari 4.\n * Known issue: no IE 6 support.\n </em>/</p>\n<p>[hidden] {\n    display: none;\n}</p>\n<p>/<em> ==========================================================================\n   Base\n   ========================================================================== </em>/</p>\n<p>/*<em>\n * 1. Prevent system color scheme's background color being used in Firefox, IE,\n *    and Opera.\n * 2. Prevent system color scheme's text color being used in Firefox, IE, and\n *    Opera.\n * 3. Correct text resizing oddly in IE 6/7 when body <code>font-size</code> is set using\n *    <code>em</code> units.\n * 4. Prevent iOS text size adjust after orientation change, without disabling\n *    user zoom.\n </em>/</p>\n<p>html {\n    background: #fff; /<em> 1 </em>/\n    color: #000; /<em> 2 </em>/\n    font-size: 100%; /<em> 3 </em>/\n    -webkit-text-size-adjust: 100%; /<em> 4 </em>/\n    -ms-text-size-adjust: 100%; /<em> 4 </em>/\n}</p>\n<p>/*<em>\n * Address <code>font-family</code> inconsistency between <code>textarea</code> and other form\n * elements.\n </em>/</p>\n<p>html,\nbutton,\ninput,\nselect,\ntextarea {\n    font-family: sans-serif;\n}</p>\n<p>/*<em>\n * Address margins handled incorrectly in IE 6/7.\n </em>/</p>\n<p>body {\n    margin: 0;\n}</p>\n<p>/<em> ==========================================================================\n   Links\n   ========================================================================== </em>/</p>\n<p>/*<em>\n * Address <code>outline</code> inconsistency between Chrome and other browsers.\n </em>/</p>\n<p>a:focus {\n    outline: thin dotted;\n}</p>\n<p>/*<em>\n * Improve readability when focused and also mouse hovered in all browsers.\n </em>/</p>\n<p>a:active,\na:hover {\n    outline: 0;\n}</p>\n<p>/<em> ==========================================================================\n   Typography\n   ========================================================================== </em>/</p>\n<p>/*<em>\n * Address font sizes and margins set differently in IE 6/7.\n * Address font sizes within <code>section</code> and <code>article</code> in Firefox 4+, Safari 5,\n * and Chrome.\n </em>/</p>\n<p>h1 {\n    font-size: 2em;\n    margin: 0.67em 0;\n}</p>\n<p>h2 {\n    font-size: 1.5em;\n    margin: 0.83em 0;\n}</p>\n<p>h3 {\n    font-size: 1.17em;\n    margin: 1em 0;\n}</p>\n<p>h4 {\n    font-size: 1em;\n    margin: 1.33em 0;\n}</p>\n<p>h5 {\n    font-size: 0.83em;\n    margin: 1.67em 0;\n}</p>\n<p>h6 {\n    font-size: 0.67em;\n    margin: 2.33em 0;\n}</p>\n<p>/*<em>\n * Address styling not present in IE 7/8/9, Safari 5, and Chrome.\n </em>/</p>\n<p>abbr[title] {\n    border-bottom: 1px dotted;\n}</p>\n<p>/*<em>\n * Address style set to <code>bolder</code> in Firefox 3+, Safari 4/5, and Chrome.\n </em>/</p>\n<p>b,\nstrong {\n    font-weight: bold;\n}</p>\n<p>blockquote {\n    margin: 1em 40px;\n}</p>\n<p>/*<em>\n * Address styling not present in Safari 5 and Chrome.\n </em>/</p>\n<p>dfn {\n    font-style: italic;\n}</p>\n<p>/*<em>\n * Address differences between Firefox and other browsers.\n * Known issue: no IE 6/7 normalization.\n </em>/</p>\n<p>hr {\n    -moz-box-sizing: content-box;\n    box-sizing: content-box;\n    height: 0;\n}</p>\n<p>/*<em>\n * Address styling not present in IE 6/7/8/9.\n </em>/</p>\n<p>mark {\n    background: #ff0;\n    color: #000;\n}</p>\n<p>/*<em>\n * Address margins set differently in IE 6/7.\n </em>/</p>\n<p>p,\npre {\n    margin: 1em 0;\n}</p>\n<p>/*<em>\n * Correct font family set oddly in IE 6, Safari 4/5, and Chrome.\n </em>/</p>\n<p>code,\nkbd,\npre,\nsamp {\n    font-family: monospace, serif;\n    _font-family: 'courier new', monospace;\n    font-size: 1em;\n}</p>\n<p>/*<em>\n * Improve readability of pre-formatted text in all browsers.\n </em>/</p>\n<p>pre {\n    white-space: pre;\n    white-space: pre-wrap;\n    word-wrap: break-word;\n}</p>\n<p>/*<em>\n * Address CSS quotes not supported in IE 6/7.\n </em>/</p>\n<p>q {\n    quotes: none;\n}</p>\n<p>/*<em>\n * Address <code>quotes</code> property not supported in Safari 4.\n </em>/</p>\n<p>q:before,\nq:after {\n    content: '';\n    content: none;\n}</p>\n<p>/*<em>\n * Address inconsistent and variable font size in all browsers.\n </em>/</p>\n<p>small {\n    font-size: 80%;\n}</p>\n<p>/*<em>\n * Prevent <code>sub</code> and <code>sup</code> affecting <code>line-height</code> in all browsers.\n </em>/</p>\n<p>sub,\nsup {\n    font-size: 75%;\n    line-height: 0;\n    position: relative;\n    vertical-align: baseline;\n}</p>\n<p>sup {\n    top: -0.5em;\n}</p>\n<p>sub {\n    bottom: -0.25em;\n}</p>\n<p>/<em> ==========================================================================\n   Lists\n   ========================================================================== </em>/</p>\n<p>/*<em>\n * Address margins set differently in IE 6/7.\n </em>/</p>\n<p>dl,\nmenu,\nol,\nul {\n    margin: 1em 0;\n}</p>\n<p>dd {\n    margin: 0 0 0 40px;\n}</p>\n<p>/*<em>\n * Address paddings set differently in IE 6/7.\n </em>/</p>\n<p>menu,\nol,\nul {\n    padding: 0 0 0 40px;\n}</p>\n<p>/*<em>\n * Correct list images handled incorrectly in IE 7.\n </em>/</p>\n<p>nav ul,\nnav ol {\n    list-style: none;\n    list-style-image: none;\n}</p>\n<p>/<em> ==========================================================================\n   Embedded content\n   ========================================================================== </em>/</p>\n<p>/*<em>\n * 1. Remove border when inside <code>a</code> element in IE 6/7/8/9 and Firefox 3.\n * 2. Improve image quality when scaled in IE 7.\n </em>/</p>\n<p>img {\n    border: 0; /<em> 1 </em>/\n    -ms-interpolation-mode: bicubic; /<em> 2 </em>/\n}</p>\n<p>/*<em>\n * Correct overflow displayed oddly in IE 9.\n </em>/</p>\n<p>svg:not(:root) {\n    overflow: hidden;\n}</p>\n<p>/<em> ==========================================================================\n   Figures\n   ========================================================================== </em>/</p>\n<p>/*<em>\n * Address margin not present in IE 6/7/8/9, Safari 5, and Opera 11.\n </em>/</p>\n<p>figure {\n    margin: 0;\n}</p>\n<p>/<em> ==========================================================================\n   Forms\n   ========================================================================== </em>/</p>\n<p>/*<em>\n * Correct margin displayed oddly in IE 6/7.\n </em>/</p>\n<p>form {\n    margin: 0;\n}</p>\n<p>/*<em>\n * Define consistent border, margin, and padding.\n </em>/</p>\n<p>fieldset {\n    border: 1px solid #c0c0c0;\n    margin: 0 2px;\n    padding: 0.35em 0.625em 0.75em;\n}</p>\n<p>/*<em>\n * 1. Correct color not being inherited in IE 6/7/8/9.\n * 2. Correct text not wrapping in Firefox 3.\n * 3. Correct alignment displayed oddly in IE 6/7.\n </em>/</p>\n<p>legend {\n    border: 0; /<em> 1 </em>/\n    padding: 0;\n    white-space: normal; /<em> 2 </em>/\n    <em>margin-left: -7px; /</em> 3 */\n}</p>\n<p>/*<em>\n * 1. Correct font size not being inherited in all browsers.\n * 2. Address margins set differently in IE 6/7, Firefox 3+, Safari 5,\n *    and Chrome.\n * 3. Improve appearance and consistency in all browsers.\n </em>/</p>\n<p>button,\ninput,\nselect,\ntextarea {\n    font-size: 100%; /<em> 1 </em>/\n    margin: 0; /<em> 2 </em>/\n    vertical-align: baseline; /<em> 3 </em>/\n    <em>vertical-align: middle; /</em> 3 */\n}</p>\n<p>/*<em>\n * Address Firefox 3+ setting <code>line-height</code> on <code>input</code> using <code>!important</code> in\n * the UA stylesheet.\n </em>/</p>\n<p>button,\ninput {\n    line-height: normal;\n}</p>\n<p>/*<em>\n * Address inconsistent <code>text-transform</code> inheritance for <code>button</code> and <code>select</code>.\n * All other form control elements do not inherit <code>text-transform</code> values.\n * Correct <code>button</code> style inheritance in Chrome, Safari 5+, and IE 6+.\n * Correct <code>select</code> style inheritance in Firefox 4+ and Opera.\n </em>/</p>\n<p>button,\nselect {\n    text-transform: none;\n}</p>\n<p>/<em><em>\n * 1. Avoid the WebKit bug in Android 4.0.</em> where (2) destroys native <code>audio</code>\n *    and <code>video</code> controls.\n * 2. Correct inability to style clickable <code>input</code> types in iOS.\n * 3. Improve usability and consistency of cursor style between image-type\n *    <code>input</code> and others.\n * 4. Remove inner spacing in IE 7 without affecting normal text inputs.\n *    Known issue: inner spacing remains in IE 6.\n </em>/</p>\n<p>button,\nhtml input[type=\"button\"], /<em> 1 </em>/\ninput[type=\"reset\"],\ninput[type=\"submit\"] {\n    -webkit-appearance: button; /<em> 2 </em>/\n    cursor: pointer; /<em> 3 </em>/\n    <em>overflow: visible;  /</em> 4 */\n}</p>\n<p>/*<em>\n * Re-set default cursor for disabled elements.\n </em>/</p>\n<p>button[disabled],\nhtml input[disabled] {\n    cursor: default;\n}</p>\n<p>/*<em>\n * 1. Address box sizing set to content-box in IE 8/9.\n * 2. Remove excess padding in IE 8/9.\n * 3. Remove excess padding in IE 7.\n *    Known issue: excess padding remains in IE 6.\n </em>/</p>\n<p>input[type=\"checkbox\"],\ninput[type=\"radio\"] {\n    box-sizing: border-box; /<em> 1 </em>/\n    padding: 0; /<em> 2 </em>/\n    <em>height: 13px; /</em> 3 <em>/\n    </em>width: 13px; /<em> 3 </em>/\n}</p>\n<p>/*<em>\n * 1. Address <code>appearance</code> set to <code>searchfield</code> in Safari 5 and Chrome.\n * 2. Address <code>box-sizing</code> set to <code>border-box</code> in Safari 5 and Chrome\n *    (include <code>-moz</code> to future-proof).\n </em>/</p>\n<p>input[type=\"search\"] {\n    -webkit-appearance: textfield; /<em> 1 </em>/\n    -moz-box-sizing: content-box;\n    -webkit-box-sizing: content-box; /<em> 2 </em>/\n    box-sizing: content-box;\n}</p>\n<p>/*<em>\n * Remove inner padding and search cancel button in Safari 5 and Chrome\n * on OS X.\n </em>/</p>\n<p>input[type=\"search\"]::-webkit-search-cancel-button,\ninput[type=\"search\"]::-webkit-search-decoration {\n    -webkit-appearance: none;\n}</p>\n<p>/*<em>\n * Remove inner padding and border in Firefox 3+.\n </em>/</p>\n<p>button::-moz-focus-inner,\ninput::-moz-focus-inner {\n    border: 0;\n    padding: 0;\n}</p>\n<p>/*<em>\n * 1. Remove default vertical scrollbar in IE 6/7/8/9.\n * 2. Improve readability and alignment in all browsers.\n </em>/</p>\n<p>textarea {\n    overflow: auto; /<em> 1 </em>/\n    vertical-align: top; /<em> 2 </em>/\n}</p>\n<p>/<em> ==========================================================================\n   Tables\n   ========================================================================== </em>/</p>\n<p>/*<em>\n * Remove most spacing between table cells.\n </em>/</p>\n<p>table {\n    border-collapse: collapse;\n    border-spacing: 0;\n}</p>\n\n\n\n\n\n\n<p>html, body {\n    margin: 0;\n    padding: 0;\n    height: 100%;\n  }\n  body {\n    background: #fff;\n    font-family: \"Source Sans Pro\", \"Helvetica Neueue\", Helvetica, sans;\n    font-weight: 300;\n    font-size: 16px;\n    line-height: 1.6em;\n  }\n  #content {\n    width: 70%;\n    max-width: 850px;\n    float: left;\n    padding: 30px 60px;\n    border-left: 1px solid #ddd;\n  }\n  #sidebar {\n    width: 25%;\n    float: left;\n    padding: 30px;\n    overflow: hidden;\n  }\n  #nav {\n    font-size: 130%;\n    margin: 0 0 15px 0;\n  }</p>\n<p>#top {\n    display: block;\n    position: fixed;\n    bottom: 5px;\n    left: 5px;\n    font-size: .85em;\n    text-transform: uppercase;\n  }</p>\n<p>#footer {\n    font-size: .75em;\n    padding: 5px 30px;\n    border-top: 1px solid #ddd;\n    text-align: right;\n  }\n    #footer p {\n      margin: 0 0 0 30px;\n      display: inline-block;\n    }</p>\n<p>h1, h2, h3, h4, h5 {\n    font-weight: 300;\n  }\n  h1 {\n    font-size: 2.5em;\n    line-height: 1.1em;\n    margin: 0 0 .50em 0;\n  }</p>\n<p>h2 {\n    font-size: 1.75em;\n    margin: 1em 0 .50em 0;\n  }</p>\n<p>h3 {\n    margin: 25px 0 10px 0;\n  }</p>\n<p>h4 {\n    margin: 0;\n    font-size: 105%;\n  }</p>\n<p>a {\n    color: #058;\n    text-decoration: none;\n    transition: color .3s ease-in-out;\n  }</p>\n<p>a:hover {\n    color: #e08524;\n    transition: color .3s ease-in-out;\n  }</p>\n<p>pre, code, .mono, .name {\n    font-family: \"Ubuntu Mono\", \"Cousine\", \"DejaVu Sans Mono\", monospace;\n  }</p>\n<p>.title .name {\n    font-weight: bold;\n  }\n  .section-title {\n    margin-top: 2em;\n  }\n  .ident {\n    color: #900;\n  }</p>\n<p>code {\n    background: #f9f9f9;\n  } </p>\n<p>pre {\n    background: #fefefe;\n    border: 1px solid #ddd;\n    box-shadow: 2px 2px 0 #f3f3f3;\n    margin: 0 30px;\n    padding: 15px 30px;\n  }</p>\n<p>.codehilite {\n    margin: 0 30px 10px 30px;\n  }</p>\n<pre><code>.codehilite pre {\n  margin: 0;\n}\n.codehilite .err { background: #ff3300; color: #fff !important; }\n</code></pre>\n<p>table#module-list {\n    font-size: 110%;\n  }</p>\n<pre><code>table#module-list tr td:first-child {\n  padding-right: 10px;\n  white-space: nowrap;\n}\n\ntable#module-list td {\n  vertical-align: top;\n  padding-bottom: 8px;\n}\n\n  table#module-list td p {\n    margin: 0 0 7px 0;\n  }\n</code></pre>\n<p>.def {\n    display: table;\n  }</p>\n<pre><code>.def p {\n  display: table-cell;\n  vertical-align: top;\n  text-align: left;\n}\n\n.def p:first-child {\n  white-space: nowrap;\n}\n\n.def p:last-child {\n  width: 100%;\n}\n</code></pre>\n<p>#index {\n    list-style-type: none;\n    margin: 0;\n    padding: 0;\n  }\n    ul#index .class_name {\n      /<em> font-size: 110%; </em>/\n      font-weight: bold;\n    }\n    #index ul {\n      margin: 0;\n    }</p>\n<p>.item {\n    margin: 0 0 15px 0;\n  }</p>\n<pre><code>.item .class {\n  margin: 0 0 25px 30px;\n}\n\n  .item .class ul.class_list {\n    margin: 0 0 20px 0;\n  }\n\n.item .name {\n  background: #fafafa;\n  margin: 0;\n  font-weight: bold;\n  padding: 5px 10px;\n  border-radius: 3px;\n  display: inline-block;\n  min-width: 40%;\n}\n  .item .name:hover {\n    background: #f6f6f6;\n  }\n\n.item .empty_desc {\n  margin: 0 0 5px 0;\n  padding: 0;\n}\n\n.item .inheritance {\n  margin: 3px 0 0 30px;\n}\n\n.item .inherited {\n  color: #666;\n}\n\n.item .desc {\n  padding: 0 8px;\n  margin: 0;\n}\n\n  .item .desc p {\n    margin: 0 0 10px 0;\n  }\n\n.source_cont {\n  margin: 0;\n  padding: 0;\n}\n\n.source_link a {\n  background: #ffc300;\n  font-weight: 400;\n  font-size: .75em;\n  text-transform: uppercase;\n  color: #fff;\n  text-shadow: 1px 1px 0 #f4b700;\n\n  padding: 3px 8px;\n  border-radius: 2px;\n  transition: background .3s ease-in-out;\n}\n  .source_link a:hover {\n    background: #FF7200;\n    text-shadow: none;\n    transition: background .3s ease-in-out;\n  }\n\n.source {\n  display: none;\n  max-height: 600px;\n  overflow-y: scroll;\n  margin-bottom: 15px;\n}\n\n  .source .codehilite {\n    margin: 0;\n  }\n</code></pre>\n<p>.desc h1, .desc h2, .desc h3 {\n    font-size: 100% !important;\n  }\n  .clear {\n    clear: both;\n  }</p>\n<p>@media all and (max-width: 950px) {\n    #sidebar {\n      width: 35%;\n    }\n    #content {\n      width: 65%;\n    }\n  }\n  @media all and (max-width: 650px) {\n    #top {\n      display: none;\n    }\n    #sidebar {\n      float: none;\n      width: auto;\n    }\n    #content {\n      float: none;\n      width: auto;\n      padding: 30px;\n    }</p>\n<pre><code>#index ul {\n  padding: 0;\n  margin-bottom: 15px;\n}\n#index ul li {\n  display: inline-block;\n  margin-right: 30px;\n}\n#footer {\n  text-align: left;\n}\n#footer p {\n  display: block;\n  margin: inherit;\n}\n</code></pre>\n<p>}</p>\n<p>/<strong><em>*</em></strong><strong><em>*</em></strong><strong><em>*</em></strong><strong><em>*</em></strong>*/</p>\n\n\n\n\n\n  .codehilite .hll { background-color: #ffffcc }\n.codehilite  { background: #f8f8f8; }\n.codehilite .c { color: #408080; font-style: italic } /<em> Comment </em>/\n.codehilite .err { border: 1px solid #FF0000 } /<em> Error </em>/\n.codehilite .k { color: #008000; font-weight: bold } /<em> Keyword </em>/\n.codehilite .o { color: #666666 } /<em> Operator </em>/\n.codehilite .cm { color: #408080; font-style: italic } /<em> Comment.Multiline </em>/\n.codehilite .cp { color: #BC7A00 } /<em> Comment.Preproc </em>/\n.codehilite .c1 { color: #408080; font-style: italic } /<em> Comment.Single </em>/\n.codehilite .cs { color: #408080; font-style: italic } /<em> Comment.Special </em>/\n.codehilite .gd { color: #A00000 } /<em> Generic.Deleted </em>/\n.codehilite .ge { font-style: italic } /<em> Generic.Emph </em>/\n.codehilite .gr { color: #FF0000 } /<em> Generic.Error </em>/\n.codehilite .gh { color: #000080; font-weight: bold } /<em> Generic.Heading </em>/\n.codehilite .gi { color: #00A000 } /<em> Generic.Inserted </em>/\n.codehilite .go { color: #888888 } /<em> Generic.Output </em>/\n.codehilite .gp { color: #000080; font-weight: bold } /<em> Generic.Prompt </em>/\n.codehilite .gs { font-weight: bold } /<em> Generic.Strong </em>/\n.codehilite .gu { color: #800080; font-weight: bold } /<em> Generic.Subheading </em>/\n.codehilite .gt { color: #0044DD } /<em> Generic.Traceback </em>/\n.codehilite .kc { color: #008000; font-weight: bold } /<em> Keyword.Constant </em>/\n.codehilite .kd { color: #008000; font-weight: bold } /<em> Keyword.Declaration </em>/\n.codehilite .kn { color: #008000; font-weight: bold } /<em> Keyword.Namespace </em>/\n.codehilite .kp { color: #008000 } /<em> Keyword.Pseudo </em>/\n.codehilite .kr { color: #008000; font-weight: bold } /<em> Keyword.Reserved </em>/\n.codehilite .kt { color: #B00040 } /<em> Keyword.Type </em>/\n.codehilite .m { color: #666666 } /<em> Literal.Number </em>/\n.codehilite .s { color: #BA2121 } /<em> Literal.String </em>/\n.codehilite .na { color: #7D9029 } /<em> Name.Attribute </em>/\n.codehilite .nb { color: #008000 } /<em> Name.Builtin </em>/\n.codehilite .nc { color: #0000FF; font-weight: bold } /<em> Name.Class </em>/\n.codehilite .no { color: #880000 } /<em> Name.Constant </em>/\n.codehilite .nd { color: #AA22FF } /<em> Name.Decorator </em>/\n.codehilite .ni { color: #999999; font-weight: bold } /<em> Name.Entity </em>/\n.codehilite .ne { color: #D2413A; font-weight: bold } /<em> Name.Exception </em>/\n.codehilite .nf { color: #0000FF } /<em> Name.Function </em>/\n.codehilite .nl { color: #A0A000 } /<em> Name.Label </em>/\n.codehilite .nn { color: #0000FF; font-weight: bold } /<em> Name.Namespace </em>/\n.codehilite .nt { color: #008000; font-weight: bold } /<em> Name.Tag </em>/\n.codehilite .nv { color: #19177C } /<em> Name.Variable </em>/\n.codehilite .ow { color: #AA22FF; font-weight: bold } /<em> Operator.Word </em>/\n.codehilite .w { color: #bbbbbb } /<em> Text.Whitespace </em>/\n.codehilite .mb { color: #666666 } /<em> Literal.Number.Bin </em>/\n.codehilite .mf { color: #666666 } /<em> Literal.Number.Float </em>/\n.codehilite .mh { color: #666666 } /<em> Literal.Number.Hex </em>/\n.codehilite .mi { color: #666666 } /<em> Literal.Number.Integer </em>/\n.codehilite .mo { color: #666666 } /<em> Literal.Number.Oct </em>/\n.codehilite .sb { color: #BA2121 } /<em> Literal.String.Backtick </em>/\n.codehilite .sc { color: #BA2121 } /<em> Literal.String.Char </em>/\n.codehilite .sd { color: #BA2121; font-style: italic } /<em> Literal.String.Doc </em>/\n.codehilite .s2 { color: #BA2121 } /<em> Literal.String.Double </em>/\n.codehilite .se { color: #BB6622; font-weight: bold } /<em> Literal.String.Escape </em>/\n.codehilite .sh { color: #BA2121 } /<em> Literal.String.Heredoc </em>/\n.codehilite .si { color: #BB6688; font-weight: bold } /<em> Literal.String.Interpol </em>/\n.codehilite .sx { color: #008000 } /<em> Literal.String.Other </em>/\n.codehilite .sr { color: #BB6688 } /<em> Literal.String.Regex </em>/\n.codehilite .s1 { color: #BA2121 } /<em> Literal.String.Single </em>/\n.codehilite .ss { color: #19177C } /<em> Literal.String.Symbol </em>/\n.codehilite .bp { color: #008000 } /<em> Name.Builtin.Pseudo </em>/\n.codehilite .vc { color: #19177C } /<em> Name.Variable.Class </em>/\n.codehilite .vg { color: #19177C } /<em> Name.Variable.Global </em>/\n.codehilite .vi { color: #19177C } /<em> Name.Variable.Instance </em>/\n.codehilite .il { color: #666666 } /<em> Literal.Number.Integer.Long </em>/\n  \n\n\n\n\n<p>/<em> ==========================================================================\n   EXAMPLE Media Queries for Responsive Design.\n   These examples override the primary ('mobile first') styles.\n   Modify as content requires.\n   ========================================================================== </em>/</p>\n<p>@media only screen and (min-width: 35em) {\n    /<em> Style adjustments for viewports that meet the condition </em>/\n}</p>\n<p>@media print,\n       (-o-min-device-pixel-ratio: 5/4),\n       (-webkit-min-device-pixel-ratio: 1.25),\n       (min-resolution: 120dpi) {\n    /<em> Style adjustments for high resolution devices </em>/\n}</p>\n<p>/<em> ==========================================================================\n   Print styles.\n   Inlined to avoid required HTTP connection: h5bp.com/r\n   ========================================================================== </em>/</p>\n<p>@media print {\n    * {\n        background: transparent !important;\n        color: #000 !important; /<em> Black prints faster: h5bp.com/s </em>/\n        box-shadow: none !important;\n        text-shadow: none !important;\n    }</p>\n<pre><code>a,\na:visited {\n    text-decoration: underline;\n}\n\na[href]:after {\n    content: \" (\" attr(href) \")\";\n}\n\nabbr[title]:after {\n    content: \" (\" attr(title) \")\";\n}\n\n/*\n * Don't show links for images, or javascript/internal links\n */\n\n.ir a:after,\na[href^=\"javascript:\"]:after,\na[href^=\"#\"]:after {\n    content: \"\";\n}\n\npre,\nblockquote {\n    border: 1px solid #999;\n    page-break-inside: avoid;\n}\n\nthead {\n    display: table-header-group; /* h5bp.com/t */\n}\n\ntr,\nimg {\n    page-break-inside: avoid;\n}\n\nimg {\n    max-width: 100% !important;\n}\n\n@page {\n    margin: 0.5cm;\n}\n\np,\nh2,\nh3 {\n    orphans: 3;\n    widows: 3;\n}\n\nh2,\nh3 {\n    page-break-after: avoid;\n}\n</code></pre>\n<p>}</p>\n\n\n\n\n\n  function toggle(id, $link) {\n    $node = document.getElementById(id);\n    if (!$node)\n    return;\n    if (!$node.style.display || $node.style.display == 'none') {\n    $node.style.display = 'block';\n    $link.innerHTML = 'Hide source &nequiv;';\n    } else {\n    $node.style.display = 'none';\n    $link.innerHTML = 'Show source &equiv;';\n    }\n  }\n  \n\n\n\n\n\n\nTop\n\n\n\n\n  \n\n    \nIndex\n\n    \n\n\n    \nFunctions\n\n\n  \n\n    \nembed\n\n    \nget_smash\n\n    \nstart_ipython\n\n  \n\n\n    \n\n\n\n    \nSub-modules\n\n      \n\n        \nsmashlib.bases\n\n        \nsmashlib.bin\n\n        \nsmashlib.channels\n\n        \nsmashlib.contrib\n\n        \nsmashlib.data\n\n        \nsmashlib.exceptions\n\n        \nsmashlib.import_hooks\n\n        \nsmashlib.prefilters\n\n        \nsmashlib.prompt\n\n        \nsmashlib.testing\n\n        \nsmashlib.v2\n\n        \nsmashlib.version\n\n      \n\n    \n\n    \n\n  \n\n\n\narticle id=\"content\"\n\n\n\n\n\n  \nsmashlib\n module\n\n  \nsmashlib\n\n\nShow source \n\n  \n\n    \n smashlib\n\n\n\n\nversion\n \n=\n \n0.1\n\n\nimport\n \nos\n\n\nfrom\n \ngoulash._inspect\n \nimport\n \nget_caller\n\n\nfrom\n \nsmashlib.import_hooks\n \nimport\n \nhijack_ipython_module\n\n\ndef\n \nstart_ipython\n(\nargv\n=\nNone\n,\n \nkwargs\n):\n\n    \nfrom\n \nsmashlib.overrides\n \nimport\n \nlaunch_new_instance\n\n    \nreturn\n \nlaunch_new_instance\n(\nargv\n=\nargv\n,\n \nkwargs\n)\n\n\ndef\n \nembed\n(\nargv\n=\ntuple\n(),\n \nkargs\n):\n\n    \nhijack_ipython_module\n()\n\n    \n# if os.environ.get(\nSMASH\n, None):\n\n    \n#    print \n..detected nesting.. this may cause problems\n\n    \ncontext\n \n=\n \nkargs\n.\npop\n(\nuser_ns\n,\n \n{})\n\n    \ncaller_context\n \n=\n \nget_caller\n(\n2\n)\n\n    \nif\n \ncontext\n \nis\n \nnot\n \nNone\n:\n\n        \ncontext\n.\nupdate\n(\ncaller_context\n[\nglobals\n])\n\n        \ncontext\n.\nupdate\n(\ncaller_context\n[\nlocals\n])\n\n    \nif\n \n--no-confirm-exit\n \nnot\n \nin\n \nargv\n:\n\n        \nargv\n \n=\n \n[\n--no-confirm-exit\n]\n \n+\n \nlist\n(\nargv\n)\n\n    \ntry\n:\n\n        \nstart_ipython\n(\nargv\n=\nargv\n,\n \nuser_ns\n=\ncontext\n,\n \nkargs\n)\n\n    \nexcept\n \nKeyboardInterrupt\n:\n\n        \nprint\n \ncaught kbi\n\n\ndef\n \nget_smash\n():\n\n    \ntry\n:\n\n        \nip\n \n=\n \nget_ipython\n()\n\n    \nexcept\n \nNameError\n:\n\n        \nreturn\n \nNone\n\n    \ntry\n:\n\n        \nreturn\n \nip\n.\n_smash\n\n    \nexcept\n \nAttributeError\n:\n\n        \nraise\n \nException\n(\nload smash first\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\nh2 class=\"section-title\" id=\"header-functions\"\nFunctions\n/h2\n\n\n\n\n\n    \n\n    \ndef \nembed\n(\nargv=(), **kargs)\n\n    \n\n\n\n  \nShow source \n\n  \n\n    \ndef\n \nembed\n(\nargv\n=\ntuple\n(),\n \nkargs\n):\n\n    \nhijack_ipython_module\n()\n\n    \n# if os.environ.get(\nSMASH\n, None):\n\n    \n#    print \n..detected nesting.. this may cause problems\n\n    \ncontext\n \n=\n \nkargs\n.\npop\n(\nuser_ns\n,\n \n{})\n\n    \ncaller_context\n \n=\n \nget_caller\n(\n2\n)\n\n    \nif\n \ncontext\n \nis\n \nnot\n \nNone\n:\n\n        \ncontext\n.\nupdate\n(\ncaller_context\n[\nglobals\n])\n\n        \ncontext\n.\nupdate\n(\ncaller_context\n[\nlocals\n])\n\n    \nif\n \n--no-confirm-exit\n \nnot\n \nin\n \nargv\n:\n\n        \nargv\n \n=\n \n[\n--no-confirm-exit\n]\n \n+\n \nlist\n(\nargv\n)\n\n    \ntry\n:\n\n        \nstart_ipython\n(\nargv\n=\nargv\n,\n \nuser_ns\n=\ncontext\n,\n \nkargs\n)\n\n    \nexcept\n \nKeyboardInterrupt\n:\n\n        \nprint\n \ncaught kbi\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n    \ndef \nget_smash\n(\n)\n\n    \n\n\n\n  \nShow source \n\n  \n\n    \ndef\n \nget_smash\n():\n\n    \ntry\n:\n\n        \nip\n \n=\n \nget_ipython\n()\n\n    \nexcept\n \nNameError\n:\n\n        \nreturn\n \nNone\n\n    \ntry\n:\n\n        \nreturn\n \nip\n.\n_smash\n\n    \nexcept\n \nAttributeError\n:\n\n        \nraise\n \nException\n(\nload smash first\n)\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n    \ndef \nstart_ipython\n(\nargv=None, **kwargs)\n\n    \n\n\n\n  \nShow source \n\n  \n\n    \ndef\n \nstart_ipython\n(\nargv\n=\nNone\n,\n \nkwargs\n):\n\n    \nfrom\n \nsmashlib.overrides\n \nimport\n \nlaunch_new_instance\n\n    \nreturn\n \nlaunch_new_instance\n(\nargv\n=\nargv\n,\n \nkwargs\n)\n\n\n\n\n\n\n\n\n\n\n\nh2 class=\"section-title\" id=\"header-submodules\"\nSub-modules\n/h2\n\n  \ndiv class=\"item\"\n\n  \np class=\"name\"\na href=\"bases/index.html\"\nsmashlib.bases\n/a\n/p\n\n\n\n\ndiv class=\"desc\"\np\nsmashlib.bases\n/p\n/div\n\n\n  \n/div\n\n  \ndiv class=\"item\"\n\n  \np class=\"name\"\na href=\"bin/index.html\"\nsmashlib.bin\n/a\n/p\n\n\n\n\n  \n/div\n\n  \ndiv class=\"item\"\n\n  \np class=\"name\"\na href=\"channels.m.html\"\nsmashlib.channels\n/a\n/p\n\n\n\n\ndiv class=\"desc\"\np\nsmashlib.channels\n/p\n/div\n\n\n  \n/div\n\n  \ndiv class=\"item\"\n\n  \np class=\"name\"\na href=\"contrib/index.html\"\nsmashlib.contrib\n/a\n/p\n\n\n\n\n  \n/div\n\n  \ndiv class=\"item\"\n\n  \np class=\"name\"\na href=\"data.m.html\"\nsmashlib.data\n/a\n/p\n\n\n\n\ndiv class=\"desc\"\np\nsmashlib.data\n/p\n/div\n\n\n  \n/div\n\n  \ndiv class=\"item\"\n\n  \np class=\"name\"\na href=\"exceptions.m.html\"\nsmashlib.exceptions\n/a\n/p\n\n\n\n\ndiv class=\"desc\"\np\nsmashlib.exceptions\n/p\n/div\n\n\n  \n/div\n\n  \ndiv class=\"item\"\n\n  \np class=\"name\"\na href=\"import_hooks.m.html\"\nsmashlib.import_hooks\n/a\n/p\n\n\n\n\ndiv class=\"desc\"\np\nsmashlib.import_hooks\n/p\n/div\n\n\n  \n/div\n\n  \ndiv class=\"item\"\n\n  \np class=\"name\"\na href=\"prefilters/index.html\"\nsmashlib.prefilters\n/a\n/p\n\n\n\n\ndiv class=\"desc\"\np\nsmashlib.prefilters\n/p\n/div\n\n\n  \n/div\n\n  \ndiv class=\"item\"\n\n  \np class=\"name\"\na href=\"prompt/index.html\"\nsmashlib.prompt\n/a\n/p\n\n\n\n\ndiv class=\"desc\"\np\nsmashlib.prompt\n/p\n/div\n\n\n  \n/div\n\n  \ndiv class=\"item\"\n\n  \np class=\"name\"\na href=\"testing.m.html\"\nsmashlib.testing\n/a\n/p\n\n\n\n\ndiv class=\"desc\"\np\nsmashlib.testing\n/p\n\n\n\n\nBase classes, etc for smashlib's tests.\n\n\nNote: The tests themselves are in the source\n      root, not inside the smashlib package\n\n\n  \n/div\n\n  \ndiv class=\"item\"\n\n  \np class=\"name\"\na href=\"v2.m.html\"\nsmashlib.v2\n/a\n/p\n\n\n\n\n  \n/div\n\n  \ndiv class=\"item\"\n\n  \np class=\"name\"\na href=\"version.m.html\"\nsmashlib.version\n/a\n/p\n\n\n\n\ndiv class=\"desc\"\np\nsmashlib.version\n/p\n/div\n\n\n  \n/div\n\n\n\n\n\n\n\n/article\n\n\n\n\n \n\n  \n\n    \n\n      Documentation generated by\n      \npdoc 0.3.1\n\n    \n\n\np\npdoc is in the public domain with the\n  \na href=\"http://unlicense.org\"\nUNLICENSE\n/a\n/p\n\n\n\np\nDesign by \na href=\"http://nadh.in\"\nKailash Nadh\n/a\n/p", 
            "title": "API Reference"
        }
    ]
}